точка выхода туристской группы и точка окончания пути, между точками опр расстояние; между точками расположени=ы пункты оттдыха; определить, какие пункты посетит группа и в какое количество дней будет пройден путь от начала до конца
на вход: длина пути, колво пунктов, расстояние от начала до каждого пункта, средняя скорость группы, время восхода (часы, минуты), время щахода (часы, минуты)
условия: группа выходит с восходом солнца, остановка в том пункте, после которог туристы не успевают дойти до следующего, т. к. солнце село
выход: какие пункты посетят туристы, и сколько дней нужно, чтобы пройти заданное расстояние
(в пункт заходим, только если не успеваем до следующего до ночи; выходим с восходом)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication21
{
    class HelloWorld
    {
        class Item
        {
            string name = "abc";
            string unit = "dfg";
            int cost = 0;

            public Item(string name, string unit, int cost)
            {
                this.name = name;
                this.unit = unit;
                this.cost = cost;
            }
            public string Name
            {
                get { return name; }
                set { name = value; }
            }
            public string Unit
            {
                get { return unit; }
                set { unit = value; }
            }
            public int Cost
            {
                get { return cost; }
                set { cost = value; }
            }
        }

        class Product : Item
        {
            int storage_life = 2023;
            int kcal = 100;
            int protein = 100;
            int fats = 100;
            int carb = 100;
            public Product(int storage_life, int kcal, int protein, int fats, int carb, string name, string unit, int cost)
                : base(name, unit, cost)
            {
                this.storage_life = storage_life;
                this.kcal = kcal;
                this.protein = protein;
                this.fats = fats;
                this.carb = carb;
            }
            public int Stor_Life
            {
                get { return storage_life; }
                set { storage_life = value; }
            }
            public int Kcal
            {
                get { return kcal; }
                set { kcal = value; }
            }
            public int Protein
            {
                get { return protein; }
                set { protein = value; }
            }
            public int Fats
            {
                get { return fats; }
                set { fats = value; }
            }
            public int Carb
            {
                get { return carb; }
                set { carb = value; }
            }
            public void Print1()
            {
                Console.WriteLine("Наименование: {0}", this.Name);
                Console.WriteLine("Единицы измерения: {0}", this.Unit);
                Console.WriteLine("Стоимость товара: {0} рублей/ед.измерения", this.Cost);
                Console.WriteLine("Срок годности: до {0} года", this.storage_life);
                Console.WriteLine("Энергетическая ценность: {0} ккал", this.kcal);
                Console.WriteLine("Белки: {0}", this.protein);
                Console.WriteLine("Жиры: {0}", this.fats);
                Console.WriteLine("Углеводы: {0}", this.carb);
            }
        }
        class Building : Item
        {
            string mat = "air";
            public Building(string name, string mat, string unit, int cost)
                : base(name, unit, cost)
            {
                this.mat = mat;
            }
            public string Material
            {
                get { return mat; }
                set { mat = value; }
            }
            public void Print2()
            {
                Console.WriteLine("Наименование: {0}", this.Name);
                Console.WriteLine("Единицы измерения: {0}", this.Unit);
                Console.WriteLine("Стоимость товара: {0} рублей/ед.измерения", this.Cost);
                Console.WriteLine("Материал: {0}", this.mat);
            }
        }

        static void Main()
        {
            Product[] prm = new Product[4];
            prm[0] = new Product(500, 2050, 1000, 500, 100, "Жидкое мясо", "литр", 200);
            prm[1] = new Product(400, 2025, 200, 400, 1000, "Медовик", "штука", 500);
            prm[2] = new Product(1000, 50, 100, 200, 100, "Кокакола лайт", "литр", 400);
            prm[3] = new Product(10,  200, 1000, 300, 300,"Пельмени", "пельмень", 300);
            Building[] bm = new Building[4];
            bm[0] = new Building("Кирпичи", "кг", "кирпичная субстанция", 50);
            bm[1] = new Building("Нанотрубки", "милиметр в кв.", "углерод", 100000);
            bm[2] = new Building("Гвозди", "штука", "нержавейка", 10);
            bm[3] = new Building("Ледяные блоки", "градус цельсия", "лёд", 0);

            Console.WriteLine("Список продуктов:");
            for (int i = 0; i < 4; i++)
            {
                Console.WriteLine(prm[i].Name);
            }
            for (int i = 0; i < 4; i++)
            {
                Console.WriteLine(bm[i].Unit);
            }
        }
    }
}









